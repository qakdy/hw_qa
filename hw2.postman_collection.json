{
	"info": {
		"_postman_id": "a79dfea8-f45a-4c31-a48a-8b5e0a56f469",
		"name": "hw2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Body is correct\", function () {",
							"    pm.expect(pm.response.text()).to.eql(\"This is the first responce from server!\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}first",
					"host": [
						"{{url}}first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200",
							"req = request.data",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 3. Спарсить response body в json.",
							"var resp = pm.response.json()",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)",
							"pm.test(\"Response name\", function () {",
							"    pm.expect(resp.name).to.eql(\"Dmitriy\");",
							"});",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)",
							"pm.test(\"Response age\", function () {",
							"    pm.expect(resp.age).to.eql(\"20\");",
							"});",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)",
							"pm.test(\"Response salary\", function () {",
							"    pm.expect(resp.salary).to.eql(1000);",
							"});",
							"// 7. Спарсить request.",
							"var req = request.data",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Request name\", function () {",
							"    pm.expect(resp.name).to.eql(req.name);",
							"});",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"Request age\", function () {",
							"    pm.expect(resp.age).to.eql(req.age);",
							"});",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test(\"Request salary\", function () {",
							"    pm.expect(resp.salary).to.eql(parseInt(req.salary));",
							"});",
							"// 11. Вывести в консоль параметр family из response.",
							"console.log(\"family=\"+ resp.family.children)",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"pm.test(\"Salary\", function(){",
							"    pm.expect(resp.family.u_salary_1_5_year).to.eql(req.salary*4);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Dmitriy",
							"type": "text"
						},
						{
							"key": "age",
							"value": "20",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_3",
					"host": [
						"{{url}}user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200",
							"pm.test(\"Status 200\", function(){",
							"    pm.response.to.have.status(200)",
							"});",
							"// 3. Спарсить response body в json.",
							"let resp = pm.response.json()",
							"// 4. Спарсить request.",
							"let req = pm.request.url.query.toObject()",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Request name\", function(){",
							"    pm.expect(resp.name).to.eql(req.name);",
							"});",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"Request age\", function(){",
							"    pm.expect(resp.age).to.eql(req.age);",
							"});",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test(\"Request salary\", function(){",
							"    pm.expect(resp.salary).to.eql(parseInt(req.salary));",
							"});",
							"// 8. Вывести в консоль параметр family из response.",
							"console.log(\"family = \"+resp.family.children)",
							"// 9. Проверить, что у параметра dog есть параметры name.",
							"console.log(\"dog name = \"+resp.family.pets.dog.name)",
							"// 10. Проверить, что у параметра dog есть параметры age.",
							"console.log(\"dog age = \"+resp.family.pets.dog.age)",
							"// 11. Проверить, что параметр name имеет значение Luky.",
							"pm.test(\"name Luky\", function () {",
							"    pm.expect(resp.family.pets.dog.name).to.eql(\"Luky\");",
							"});",
							"// 12. Проверить, что параметр age имеет значение 4.",
							"pm.test(\"age Luky\", function () {",
							"    pm.expect(resp.family.pets.dog.age).to.eql(\"4\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_3?name=Dmitriy&age=20&salary=1000",
					"host": [
						"{{url}}object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Dmitriy"
						},
						{
							"key": "age",
							"value": "20"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200",
							"pm.test(\"Status 200\", function(){",
							"    pm.response.to.have.status(200)",
							"});",
							"// 3. Спарсить response body в json.",
							"let resp = pm.response.json()",
							"// 4. Спарсить request.",
							"let req = pm.request.url.query.toObject()",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Request name\", function(){",
							"    pm.expect(resp.name).to.eql(req.name);",
							"});",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"Request age\", function(){",
							"    pm.expect(resp.age).to.eql(parseInt(req.age));",
							"});",
							"// 7. Вывести в консоль параметр salary из request.",
							"console.log(\"console request salary=\"+req.salary)",
							"// 8. Вывести в консоль параметр salary из response.",
							"console.log(\"console response salary=\"+resp.salary)",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.",
							"console.log(\"console response salary0=\"+resp.salary[0])",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.",
							"console.log(\"console response salary1=\"+resp.salary[1])",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							"console.log(\"console response salary2=\"+resp.salary[2])",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"pm.test(\"salar 0 request salary\", function(){",
							"    pm.expect(resp.salary[0]).to.eql(parseInt(req.salary))",
							"});",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"salar 1 request salary\", function(){",
							"    pm.expect(parseInt(resp.salary[1])).to.eql(req.salary*2)",
							"});",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"pm.test(\"salar 2 request salary\", function(){",
							"    pm.expect(parseInt(resp.salary[2])).to.eql(req.salary*3)",
							"});",
							"// 15. Создать в окружении переменную name",
							"pm.environment.set(\"name\");",
							"// 16. Создать в окружении переменную age",
							"pm.environment.set(\"age\");",
							"// 17. Создать в окружении переменную salary",
							"pm.environment.set(\"salary\");",
							"// 18. Передать в окружение переменную name",
							"pm.environment.set(\"name\",resp.name);",
							"// 19. Передать в окружение переменную age",
							"pm.environment.set(\"age\",resp.age);",
							"// 20. Передать в окружение переменную salary",
							"pm.environment.set(\"salary\",resp.salary[0]);",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary ",
							"i = 3",
							"while (i){",
							"    if (i == 3) {",
							"        console.log(resp.salary[0]);",
							"        } ",
							"    if (i == 2) {console.log(resp.salary[1]);}",
							"    if (i == 1) {console.log(resp.salary[2]);}",
							"    if (i == 0) {break}",
							"    i--;",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "",
							"value": "",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}object_info_4?name=Dmitriy&age=20&salary=1000",
					"host": [
						"{{url}}object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Dmitriy"
						},
						{
							"key": "age",
							"value": "20"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 5. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 6. Спарсить response body в json.",
							"let resp = pm.response.json()",
							"// 7. Спарсить request.",
							"let req = request.data",
							"// 8. Проверить, что json response имеет параметр start_qa_salary",
							"pm.test(\"Json1\", function(){",
							"    pm.expect(resp).to.have.property(\"start_qa_salary\");",
							"});",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months",
							"pm.test(\"Json2\", function(){",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_6_months\");",
							"});",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months",
							"pm.test(\"Json3\", function(){",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_12_months\");",
							"});",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"pm.test(\"Json4\", function(){",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_1.5_year\");",
							"});",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"pm.test(\"Json5\", function(){",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_3.5_years\");",
							"});",
							"// 13. Проверить, что json response имеет параметр person",
							"pm.test(\"Json6\", function(){",
							"    pm.expect(resp).to.have.property(\"person\");",
							"});",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"pm.test(\"start qa salary = salary request\", function(){",
							"    pm.expect(resp.start_qa_salary).to.eql(parseInt(req.salary))",
							"});",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"qa_salary_after_6_months = salary*2 request\", function(){",
							"    pm.expect(resp.qa_salary_after_6_months).to.eql(parseInt(req.salary*2))",
							"});",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"pm.test(\"qa_salary_after_12_months = salary*2.7 request\", function(){",
							"    pm.expect(resp.qa_salary_after_12_months).to.eql(parseInt(req.salary*2.7))",
							"});",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"pm.test(\"qa_salary_after_1.5_year = salary*3.3 request\", function(){",
							"    pm.expect(resp[\"qa_salary_after_1.5_year\"]).to.eql(parseInt(req.salary*3.3))",
							"});",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"pm.test(\"qa_salary_after_3.5_year = salary*3.8 request\", function(){",
							"    pm.expect(resp[\"qa_salary_after_3.5_years\"]).to.eql(parseInt(req.salary*3.8))",
							"});",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"pm.test(\"person u_name[1] = salary request\", function(){",
							"    pm.expect(resp.person.u_name[1]).to.eql(parseInt(req.salary))",
							"});",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)",
							"pm.test(\"u_age = age request\", function(){",
							"    pm.expect(resp.person.u_age).to.eql(parseInt(req.age))",
							"});",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"pm.test(\"u_salary_5_years = salary*4.2 request\", function(){",
							"    pm.expect(resp.person.u_salary_5_years).to.eql(parseInt(req.salary*4.2))",
							"});",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"if (3>1){",
							"    console.log(\"ll=\", resp.person)",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_2",
					"host": [
						"{{url}}user_info_2"
					]
				}
			},
			"response": []
		}
	]
}